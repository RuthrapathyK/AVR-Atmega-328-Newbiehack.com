
Interface with RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000044c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800184  00800184  00000564  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf6  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fb  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061e  00000000  00000000  00001b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047e  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002bc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 38       	cpi	r26, 0x85	; 133
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
  9e:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
	ERROR(2);

}
void i2c_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	//Transmit STOP condition
  a6:	9c 01       	movw	r18, r24
  a8:	e4 e6       	ldi	r30, 0x64	; 100
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	80 83       	st	Z, r24
  b2:	03 2e       	mov	r0, r19
  b4:	00 0c       	add	r0, r0
  b6:	44 0b       	sbc	r20, r20
  b8:	55 0b       	sbc	r21, r21
  ba:	60 e2       	ldi	r22, 0x20	; 32
  bc:	71 ea       	ldi	r23, 0xA1	; 161
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__divmodsi4>
  c6:	da 01       	movw	r26, r20
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	a1 09       	sbc	r26, r1
  ce:	b1 09       	sbc	r27, r1
  d0:	89 2f       	mov	r24, r25
  d2:	9a 2f       	mov	r25, r26
  d4:	ab 2f       	mov	r26, r27
  d6:	bb 27       	eor	r27, r27
  d8:	a7 fd       	sbrc	r26, 7
  da:	ba 95       	dec	r27
  dc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  e6:	e1 ec       	ldi	r30, 0xC1	; 193
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 61       	ori	r24, 0x18	; 24
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <USART_Transmit>:
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <USART_Transmit+0x4>
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 100:	08 95       	ret

00000102 <USART_Transmit_String>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <USART_Transmit_String+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <USART_Transmit_String+0xe>
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <i2c_Send_data>:
 120:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 124:	84 e8       	ldi	r24, 0x84	; 132
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 12a:	ec eb       	ldi	r30, 0xBC	; 188
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	ec f7       	brge	.-6      	; 0x12e <i2c_Send_data+0xe>
 134:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	88 32       	cpi	r24, 0x28	; 40
 13c:	21 f0       	breq	.+8      	; 0x146 <i2c_Send_data+0x26>
 13e:	83 e4       	ldi	r24, 0x43	; 67
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 81 00 	call	0x102	; 0x102 <USART_Transmit_String>
 146:	08 95       	ret

00000148 <i2c_Init>:
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
 14c:	84 ea       	ldi	r24, 0xA4	; 164
 14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 23       	and	r24, r24
 15a:	ec f7       	brge	.-6      	; 0x156 <i2c_Init+0xe>
 15c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	21 f0       	breq	.+8      	; 0x16e <i2c_Init+0x26>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 81 00 	call	0x102	; 0x102 <USART_Transmit_String>
 16e:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 178:	ec eb       	ldi	r30, 0xBC	; 188
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	ec f7       	brge	.-6      	; 0x17c <i2c_Init+0x34>
 182:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 186:	88 7f       	andi	r24, 0xF8	; 248
 188:	88 31       	cpi	r24, 0x18	; 24
 18a:	21 f0       	breq	.+8      	; 0x194 <i2c_Init+0x4c>
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 81 00 	call	0x102	; 0x102 <USART_Transmit_String>
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <i2c_Init_Read>:
}
void i2c_Init_Read(unsigned char slave_address_hexadecimal)
{
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//Send START condition
 19c:	84 ea       	ldi	r24, 0xA4	; 164
 19e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	while (!(TWCR & (1<<TWINT)))	//Wait for TWINT flag set. This indicates that the STARTcondition has been transmitted
 1a2:	ec eb       	ldi	r30, 0xBC	; 188
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	88 23       	and	r24, r24
 1aa:	ec f7       	brge	.-6      	; 0x1a6 <i2c_Init_Read+0xe>
	{
	}
	if ((TWSR & 0xF8) != 0x10)/*Check value of TWI statusregister. Mask prescaler bits. Ifstatus different from START goto ERROR*/
 1ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	80 31       	cpi	r24, 0x10	; 16
 1b4:	21 f0       	breq	.+8      	; 0x1be <i2c_Init_Read+0x26>


void ERROR(uint8_t a)
{
	if(a==1)
	USART_Transmit_String("Start condition not initialized");
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 81 00 	call	0x102	; 0x102 <USART_Transmit_String>
	{
	}
	if ((TWSR & 0xF8) != 0x10)/*Check value of TWI statusregister. Mask prescaler bits. Ifstatus different from START goto ERROR*/
	ERROR(1);
	
	TWDR = slave_address_hexadecimal;
 1be:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) |(1<<TWEN);//Load SLA_W into TWDRregister. Clear TWINT bit inTWCR to start transmission ofaddress
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	while (!(TWCR & (1<<TWINT)))//Wait for TWINT flag set. Thisindicates that the SLA+W hasbeen transmitted, andACK/NACK has been received
 1c8:	ec eb       	ldi	r30, 0xBC	; 188
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	ec f7       	brge	.-6      	; 0x1cc <i2c_Init_Read+0x34>
	{
		
	}

	if ((TWSR & 0xF8) != 0x40)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_SLA_ACK go to ERROR
 1d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1d6:	88 7f       	andi	r24, 0xF8	; 248
 1d8:	80 34       	cpi	r24, 0x40	; 64
 1da:	21 f0       	breq	.+8      	; 0x1e4 <i2c_Init_Read+0x4c>
void ERROR(uint8_t a)
{
	if(a==1)
	USART_Transmit_String("Start condition not initialized");
	if(a==2)
	USART_Transmit_String("Slave Acknowledgement not received");
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 81 00 	call	0x102	; 0x102 <USART_Transmit_String>
	}

	if ((TWSR & 0xF8) != 0x40)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_SLA_ACK go to ERROR
	ERROR(2);

}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <Write_RTC>:
		_delay_ms(5000);
    }
}
void Write_RTC(void)
{
	 i2c_Init(0b11010000);//Start condition with write enable
 1e8:	80 ed       	ldi	r24, 0xD0	; 208
 1ea:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_Init>
	 i2c_Send_data(0x00);//Address to be written
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	 i2c_Send_data(0x00);//Seconds
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	 i2c_Send_data(0b00111111);//Minutes
 1fa:	8f e3       	ldi	r24, 0x3F	; 63
 1fc:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	 i2c_Send_data(0b00001111);//hours
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	 i2c_Send_data(0b00000111);//day
 206:	87 e0       	ldi	r24, 0x07	; 7
 208:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	 i2c_Send_data(0b00110011);//date
 20c:	83 e3       	ldi	r24, 0x33	; 51
 20e:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	 i2c_Send_data(0b00011111);//month
 212:	8f e1       	ldi	r24, 0x1F	; 31
 214:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	 i2c_Send_data(0b11111111);//year
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	ERROR(2);

}
void i2c_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	//Transmit STOP condition
 21e:	84 e9       	ldi	r24, 0x94	; 148
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 224:	08 95       	ret

00000226 <i2c_Receive_RTC>:
	i2c_Init_Read(0b11010001);
	i2c_Receive_RTC();
	i2c_Stop();
}
void i2c_Receive_RTC(void)
{
 226:	7f 92       	push	r7
 228:	8f 92       	push	r8
 22a:	9f 92       	push	r9
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	0f 2e       	mov	r0, r31
 242:	f6 e0       	ldi	r31, 0x06	; 6
 244:	ef 2e       	mov	r14, r31
 246:	f1 2c       	mov	r15, r1
 248:	f0 2d       	mov	r31, r0
	for(int i=0;i<=5;i++)
	{
	
		TWCR = (1<<TWINT)| (1<<TWEA)|(1<<TWEN);//Load DATA into TWDR register.clear TWINT bit in TWCR tostart transmission of data
 24a:	0c eb       	ldi	r16, 0xBC	; 188
 24c:	10 e0       	ldi	r17, 0x00	; 0
 24e:	0f 2e       	mov	r0, r31
 250:	f4 ec       	ldi	r31, 0xC4	; 196
 252:	7f 2e       	mov	r7, r31
 254:	f0 2d       	mov	r31, r0
		{
			
		}
		//USART_Transmit_String("Outside the loop");
	  
		if ((TWSR & 0xF8)!= 0x50)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_DATA_ACK go to ERROR
 256:	0f 2e       	mov	r0, r31
 258:	f9 eb       	ldi	r31, 0xB9	; 185
 25a:	af 2e       	mov	r10, r31
 25c:	b1 2c       	mov	r11, r1
 25e:	f0 2d       	mov	r31, r0
		ERROR(4);
		
		    a=TWDR;
 260:	0f 2e       	mov	r0, r31
 262:	fb eb       	ldi	r31, 0xBB	; 187
 264:	cf 2e       	mov	r12, r31
 266:	d1 2c       	mov	r13, r1
 268:	f0 2d       	mov	r31, r0
			for (int j=0;j<=7;j++)
			{
				if(((a&(1<<j))>>j)==1)
 26a:	88 24       	eor	r8, r8
 26c:	83 94       	inc	r8
 26e:	91 2c       	mov	r9, r1
void i2c_Receive_RTC(void)
{
	for(int i=0;i<=5;i++)
	{
	
		TWCR = (1<<TWINT)| (1<<TWEA)|(1<<TWEN);//Load DATA into TWDR register.clear TWINT bit in TWCR tostart transmission of data
 270:	f8 01       	movw	r30, r16
 272:	70 82       	st	Z, r7
//USART_Transmit_String("Inside the loop");
		while (!(TWCR & (1<<TWINT)))//Wait for TWINT flag set. Thisindicates that the DATA hasbeen transmitted, andACK/NACK has been received.
 274:	f8 01       	movw	r30, r16
 276:	80 81       	ld	r24, Z
 278:	88 23       	and	r24, r24
 27a:	e4 f7       	brge	.-8      	; 0x274 <i2c_Receive_RTC+0x4e>
		{
			
		}
		//USART_Transmit_String("Outside the loop");
	  
		if ((TWSR & 0xF8)!= 0x50)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_DATA_ACK go to ERROR
 27c:	f5 01       	movw	r30, r10
 27e:	80 81       	ld	r24, Z
 280:	88 7f       	andi	r24, 0xF8	; 248
 282:	80 35       	cpi	r24, 0x50	; 80
 284:	21 f0       	breq	.+8      	; 0x28e <i2c_Receive_RTC+0x68>
	if(a==2)
	USART_Transmit_String("Slave Acknowledgement not received");
	if(a==3)
	USART_Transmit_String("Data Acknowledgement not received");
        if(a==4)
	USART_Transmit_String("Data acknownlwdgement not sent");
 286:	85 e6       	ldi	r24, 0x65	; 101
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 81 00 	call	0x102	; 0x102 <USART_Transmit_String>
		ERROR(4);
		
		    a=TWDR;
 28e:	f6 01       	movw	r30, r12
 290:	80 81       	ld	r24, Z
 292:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
			for (int j=0;j<=7;j++)
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if(((a&(1<<j))>>j)==1)
 29a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	94 01       	movw	r18, r8
 2a2:	0c 2e       	mov	r0, r28
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <i2c_Receive_RTC+0x84>
 2a6:	22 0f       	add	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <i2c_Receive_RTC+0x80>
 2ae:	82 23       	and	r24, r18
 2b0:	93 23       	and	r25, r19
 2b2:	0c 2e       	mov	r0, r28
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <i2c_Receive_RTC+0x94>
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <i2c_Receive_RTC+0x90>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	91 05       	cpc	r25, r1
 2c2:	21 f4       	brne	.+8      	; 0x2cc <i2c_Receive_RTC+0xa6>
				{
					USART_Transmit('1');
 2c4:	81 e3       	ldi	r24, 0x31	; 49
 2c6:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <i2c_Receive_RTC+0xb0>
				}
			
				else if(((a&(1<<j))>>j)==0)
 2cc:	89 2b       	or	r24, r25
 2ce:	19 f4       	brne	.+6      	; 0x2d6 <i2c_Receive_RTC+0xb0>
				{
					USART_Transmit('0');
 2d0:	80 e3       	ldi	r24, 0x30	; 48
 2d2:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
	  
		if ((TWSR & 0xF8)!= 0x50)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_DATA_ACK go to ERROR
		ERROR(4);
		
		    a=TWDR;
			for (int j=0;j<=7;j++)
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	c8 30       	cpi	r28, 0x08	; 8
 2da:	d1 05       	cpc	r29, r1
 2dc:	f1 f6       	brne	.-68     	; 0x29a <i2c_Receive_RTC+0x74>
				{
					USART_Transmit('0');
				}
			
			}
			a=0x00;
 2de:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
			USART_Transmit('\n');
 2e2:	8a e0       	ldi	r24, 0x0A	; 10
 2e4:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	e2 1a       	sub	r14, r18
 2ec:	f1 08       	sbc	r15, r1
	i2c_Receive_RTC();
	i2c_Stop();
}
void i2c_Receive_RTC(void)
{
	for(int i=0;i<=5;i++)
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <i2c_Receive_RTC+0xcc>
 2f0:	bf cf       	rjmp	.-130    	; 0x270 <i2c_Receive_RTC+0x4a>
			
			}
			a=0x00;
			USART_Transmit('\n');
	}
	TWCR &=~(1<<TWEA);
 2f2:	ec eb       	ldi	r30, 0xBC	; 188
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8f 7b       	andi	r24, 0xBF	; 191
 2fa:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT|1<<TWEN);
 2fc:	80 81       	ld	r24, Z
 2fe:	84 68       	ori	r24, 0x84	; 132
 300:	80 83       	st	Z, r24
	a=TWDR;
 302:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 306:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
				for (int j=0;j<=7;j++)
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	d0 e0       	ldi	r29, 0x00	; 0
				{
					if(((a&(1<<j))>>j)==1)
 30e:	01 e0       	ldi	r16, 0x01	; 1
 310:	10 e0       	ldi	r17, 0x00	; 0
 312:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 316:	28 2f       	mov	r18, r24
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	c8 01       	movw	r24, r16
 31c:	0c 2e       	mov	r0, r28
 31e:	02 c0       	rjmp	.+4      	; 0x324 <i2c_Receive_RTC+0xfe>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <i2c_Receive_RTC+0xfa>
 328:	82 23       	and	r24, r18
 32a:	93 23       	and	r25, r19
 32c:	0c 2e       	mov	r0, r28
 32e:	02 c0       	rjmp	.+4      	; 0x334 <i2c_Receive_RTC+0x10e>
 330:	95 95       	asr	r25
 332:	87 95       	ror	r24
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <i2c_Receive_RTC+0x10a>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	91 05       	cpc	r25, r1
 33c:	21 f4       	brne	.+8      	; 0x346 <i2c_Receive_RTC+0x120>
					{
						USART_Transmit('1');
 33e:	81 e3       	ldi	r24, 0x31	; 49
 340:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
 344:	05 c0       	rjmp	.+10     	; 0x350 <i2c_Receive_RTC+0x12a>
					}
					
					else if(((a&(1<<j))>>j)==0)
 346:	89 2b       	or	r24, r25
 348:	19 f4       	brne	.+6      	; 0x350 <i2c_Receive_RTC+0x12a>
					{
						USART_Transmit('0');
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
			USART_Transmit('\n');
	}
	TWCR &=~(1<<TWEA);
	TWCR |= (1<<TWINT|1<<TWEN);
	a=TWDR;
				for (int j=0;j<=7;j++)
 350:	21 96       	adiw	r28, 0x01	; 1
 352:	c8 30       	cpi	r28, 0x08	; 8
 354:	d1 05       	cpc	r29, r1
 356:	e9 f6       	brne	.-70     	; 0x312 <i2c_Receive_RTC+0xec>
						USART_Transmit('0');
					}
					
				}
	
	a=0x00;
 358:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
	USART_Transmit('\n');
 35c:	8a e0       	ldi	r24, 0x0A	; 10
 35e:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
	USART_Transmit('\n');
 362:	8a e0       	ldi	r24, 0x0A	; 10
 364:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	bf 90       	pop	r11
 37a:	af 90       	pop	r10
 37c:	9f 90       	pop	r9
 37e:	8f 90       	pop	r8
 380:	7f 90       	pop	r7
 382:	08 95       	ret

00000384 <Read_RTC>:
	 i2c_Send_data(0b11111111);//year
	 i2c_Stop();
}
void Read_RTC(void)
{
	i2c_Init(0b11010000);//Start condition with write enable
 384:	80 ed       	ldi	r24, 0xD0	; 208
 386:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_Init>
	i2c_Send_data(0x00);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 90 00 	call	0x120	; 0x120 <i2c_Send_data>
	i2c_Init_Read(0b11010001);
 390:	81 ed       	ldi	r24, 0xD1	; 209
 392:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_Init_Read>
	i2c_Receive_RTC();
 396:	0e 94 13 01 	call	0x226	; 0x226 <i2c_Receive_RTC>
	ERROR(2);

}
void i2c_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	//Transmit STOP condition
 39a:	84 e9       	ldi	r24, 0x94	; 148
 39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3a0:	08 95       	ret

000003a2 <main>:
void Read_RTC(void);
void i2c_Receive_RTC(void);
unsigned char a=0x00;
int main(void)
{
	USART_Init(9600);
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	95 e2       	ldi	r25, 0x25	; 37
 3a6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
   Write_RTC();
 3aa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Write_RTC>
   
	
	
    while (1) 
    {
		Read_RTC();
 3ae:	0e 94 c2 01 	call	0x384	; 0x384 <Read_RTC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	81 e1       	ldi	r24, 0x11	; 17
 3b6:	9a e7       	ldi	r25, 0x7A	; 122
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x16>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x20>
 3c2:	00 00       	nop
 3c4:	f4 cf       	rjmp	.-24     	; 0x3ae <main+0xc>

000003c6 <__divmodsi4>:
 3c6:	05 2e       	mov	r0, r21
 3c8:	97 fb       	bst	r25, 7
 3ca:	1e f4       	brtc	.+6      	; 0x3d2 <__divmodsi4+0xc>
 3cc:	00 94       	com	r0
 3ce:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__negsi2>
 3d2:	57 fd       	sbrc	r21, 7
 3d4:	07 d0       	rcall	.+14     	; 0x3e4 <__divmodsi4_neg2>
 3d6:	0e 94 02 02 	call	0x404	; 0x404 <__udivmodsi4>
 3da:	07 fc       	sbrc	r0, 7
 3dc:	03 d0       	rcall	.+6      	; 0x3e4 <__divmodsi4_neg2>
 3de:	4e f4       	brtc	.+18     	; 0x3f2 <__divmodsi4_exit>
 3e0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__negsi2>

000003e4 <__divmodsi4_neg2>:
 3e4:	50 95       	com	r21
 3e6:	40 95       	com	r20
 3e8:	30 95       	com	r19
 3ea:	21 95       	neg	r18
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	4f 4f       	sbci	r20, 0xFF	; 255
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255

000003f2 <__divmodsi4_exit>:
 3f2:	08 95       	ret

000003f4 <__negsi2>:
 3f4:	90 95       	com	r25
 3f6:	80 95       	com	r24
 3f8:	70 95       	com	r23
 3fa:	61 95       	neg	r22
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	8f 4f       	sbci	r24, 0xFF	; 255
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	08 95       	ret

00000404 <__udivmodsi4>:
 404:	a1 e2       	ldi	r26, 0x21	; 33
 406:	1a 2e       	mov	r1, r26
 408:	aa 1b       	sub	r26, r26
 40a:	bb 1b       	sub	r27, r27
 40c:	fd 01       	movw	r30, r26
 40e:	0d c0       	rjmp	.+26     	; 0x42a <__udivmodsi4_ep>

00000410 <__udivmodsi4_loop>:
 410:	aa 1f       	adc	r26, r26
 412:	bb 1f       	adc	r27, r27
 414:	ee 1f       	adc	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	a2 17       	cp	r26, r18
 41a:	b3 07       	cpc	r27, r19
 41c:	e4 07       	cpc	r30, r20
 41e:	f5 07       	cpc	r31, r21
 420:	20 f0       	brcs	.+8      	; 0x42a <__udivmodsi4_ep>
 422:	a2 1b       	sub	r26, r18
 424:	b3 0b       	sbc	r27, r19
 426:	e4 0b       	sbc	r30, r20
 428:	f5 0b       	sbc	r31, r21

0000042a <__udivmodsi4_ep>:
 42a:	66 1f       	adc	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	1a 94       	dec	r1
 434:	69 f7       	brne	.-38     	; 0x410 <__udivmodsi4_loop>
 436:	60 95       	com	r22
 438:	70 95       	com	r23
 43a:	80 95       	com	r24
 43c:	90 95       	com	r25
 43e:	9b 01       	movw	r18, r22
 440:	ac 01       	movw	r20, r24
 442:	bd 01       	movw	r22, r26
 444:	cf 01       	movw	r24, r30
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
