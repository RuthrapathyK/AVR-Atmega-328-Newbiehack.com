
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006be  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062a  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#include <avr/io.h>


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0xa>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	DDRB|=(1<<0)|(1<<1)|(1<<2);;  //making port B as output and maiking all leds low
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB&=~(1<<0);
  aa:	28 98       	cbi	0x05, 0	; 5
	PORTB&=~(1<<1);
  ac:	29 98       	cbi	0x05, 1	; 5
	PORTB&=~(1<<2);
  ae:	2a 98       	cbi	0x05, 2	; 5
	
	PRR&=~(1<<PRTIM1);//initialize timmer
  b0:	e4 e6       	ldi	r30, 0x64	; 100
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 7f       	andi	r24, 0xF7	; 247
  b8:	80 83       	st	Z, r24
	
    TCCR1B|=(1<<CS12);
  ba:	e1 e8       	ldi	r30, 0x81	; 129
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	80 83       	st	Z, r24
	TCCR1B&=~(1<<CS11);  //selecting clock sourse and defining prescaling
  c4:	80 81       	ld	r24, Z
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	80 83       	st	Z, r24
	TCCR1B|=(1<<CS10);
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	80 83       	st	Z, r24
	
	int LED_number[3]={0,1,2};
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	8a 95       	dec	r24
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x44>
		int i=0;
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		if(TCNT1>10000)
  e6:	e4 e8       	ldi	r30, 0x84	; 132
  e8:	f0 e0       	ldi	r31, 0x00	; 0
		{
			
			TCNT1=0;
			PORTB^=(1<<LED_number[i]);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
	
	int LED_number[3]={0,1,2};
		int i=0;
    while (1) 
    {
		if(TCNT1>10000)
  ee:	80 81       	ld	r24, Z
  f0:	91 81       	ldd	r25, Z+1	; 0x01
  f2:	81 31       	cpi	r24, 0x11	; 17
  f4:	97 42       	sbci	r25, 0x27	; 39
  f6:	d8 f3       	brcs	.-10     	; 0xee <main+0x58>
		{
			
			TCNT1=0;
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
			PORTB^=(1<<LED_number[i]);
  fc:	45 b1       	in	r20, 0x05	; 5
  fe:	d9 01       	movw	r26, r18
 100:	aa 0f       	add	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	8c 0f       	add	r24, r28
 10a:	9d 1f       	adc	r25, r29
 10c:	a8 0f       	add	r26, r24
 10e:	b9 1f       	adc	r27, r25
 110:	cb 01       	movw	r24, r22
 112:	0c 90       	ld	r0, X
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x84>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x80>
 11e:	84 27       	eor	r24, r20
 120:	85 b9       	out	0x05, r24	; 5
			i++;
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
			if(i>2) i=0;     //togling led
 126:	23 30       	cpi	r18, 0x03	; 3
 128:	31 05       	cpc	r19, r1
 12a:	0c f3       	brlt	.-62     	; 0xee <main+0x58>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	de cf       	rjmp	.-68     	; 0xee <main+0x58>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
