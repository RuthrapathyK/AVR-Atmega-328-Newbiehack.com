
I2C Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fc  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d9  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  0000125d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  0000195d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3f       	cpi	r26, 0xF8	; 248
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  8e:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_Send_character>:
	if(a==3)
	USART_Transmit_String("Data Acknowledgement not received");*/
}
void i2c_Send_character(char b)
{
	TWDR = b;
  96:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);//Load DATA into TWDR register.clear TWINT bit in TWCR tostart transmission of data
  9a:	84 e8       	ldi	r24, 0x84	; 132
  9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	while (!(TWCR & (1<<TWINT)))//Wait for TWINT flag set. Thisindicates that the DATA hasbeen transmitted, andACK/NACK has been received.
  a0:	ec eb       	ldi	r30, 0xBC	; 188
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 23       	and	r24, r24
  a8:	ec f7       	brge	.-6      	; 0xa4 <i2c_Send_character+0xe>
	{
		
	}

	if ((TWSR & 0xF8)!= MT_DATA_ACK)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_DATA_ACK go to ERROR
  aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  ae:	08 95       	ret

000000b0 <i2c_Send_string>:
	ERROR(3);
}
void i2c_Send_string(char *p)
{
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	8c 01       	movw	r16, r24
	uint8_t volatile i=0;
  c0:	19 82       	std	Y+1, r1	; 0x01
	while(*(p+i)!='\0')
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	f8 01       	movw	r30, r16
  c6:	e8 0f       	add	r30, r24
  c8:	f1 1d       	adc	r31, r1
  ca:	80 81       	ld	r24, Z
  cc:	88 23       	and	r24, r24
  ce:	89 f0       	breq	.+34     	; 0xf2 <i2c_Send_string+0x42>
	{
		i2c_Send_character(*(p+i));
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	f8 01       	movw	r30, r16
  d4:	e8 0f       	add	r30, r24
  d6:	f1 1d       	adc	r31, r1
  d8:	80 81       	ld	r24, Z
  da:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_Send_character>
		i++;
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	89 83       	std	Y+1, r24	; 0x01
	ERROR(3);
}
void i2c_Send_string(char *p)
{
	uint8_t volatile i=0;
	while(*(p+i)!='\0')
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	f8 01       	movw	r30, r16
  e8:	e8 0f       	add	r30, r24
  ea:	f1 1d       	adc	r31, r1
  ec:	80 81       	ld	r24, Z
  ee:	81 11       	cpse	r24, r1
  f0:	ef cf       	rjmp	.-34     	; 0xd0 <i2c_Send_string+0x20>
	{
		i2c_Send_character(*(p+i));
		i++;
	}
}
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <i2c_Init>:
void i2c_Init(unsigned char slave_address_hexadecimal)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//Send START condition
  fe:	94 ea       	ldi	r25, 0xA4	; 164
 100:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	while (!(TWCR & (1<<TWINT)))	//Wait for TWINT flag set. This indicates that the STARTcondition has been transmitted
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	99 23       	and	r25, r25
 10c:	ec f7       	brge	.-6      	; 0x108 <i2c_Init+0xa>
	{
	}
	if ((TWSR & 0xF8) != START)/*Check value of TWI statusregister. Mask prescaler bits. Ifstatus different from START goto ERROR*/
 10e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	ERROR(1);
	
	TWDR = slave_address_hexadecimal;
 112:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) |(1<<TWEN);//Load SLA_W into TWDRregister. Clear TWINT bit inTWCR to start transmission ofaddress
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	while (!(TWCR & (1<<TWINT)))//Wait for TWINT flag set. Thisindicates that the SLA+W hasbeen transmitted, andACK/NACK has been received
 11c:	ec eb       	ldi	r30, 0xBC	; 188
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	ec f7       	brge	.-6      	; 0x120 <i2c_Init+0x22>
	{
		
	}

	if ((TWSR & 0xF8) != MT_SLA_ACK)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_SLA_ACK go to ERROR
 126:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 12a:	08 95       	ret

0000012c <main>:
void i2c_Stop(void);

int main(void)
{

i2c_Init(0x00);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_Init>

i2c_Send_string("These 18 English short stories are easy, engaging and will make you think hard ...");
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_Send_string>
i2c_Send_character('\n');
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_Send_character>
i2c_Send_string("These will not only improve your English reading comprehension but also open ..."); 
 140:	83 e5       	ldi	r24, 0x53	; 83
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_Send_string>
i2c_Send_character('\n');
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_Send_character>
i2c_Send_string(" (normal) tone as he discusses the details of the copier and office refrigerator...");
 14e:	84 ea       	ldi	r24, 0xA4	; 164
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_Send_string>
	if ((TWSR & 0xF8) != MT_SLA_ACK)//Check value of TWI statusregister. Mask prescaler bits. Ifstatus different fromMT_SLA_ACK go to ERROR
	ERROR(2);
}
void i2c_Stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	//Transmit STOP condition
 156:	84 e9       	ldi	r24, 0x94	; 148
 158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x30>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
