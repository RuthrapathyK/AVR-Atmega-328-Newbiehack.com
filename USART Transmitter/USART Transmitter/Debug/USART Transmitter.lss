
USART Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ea  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071c  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  00001216  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8e:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
	;
	/* Get and return received data from buffer */
	return UDR0;
}
  96:	9c 01       	movw	r18, r24
  98:	e4 e6       	ldi	r30, 0x64	; 100
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	80 83       	st	Z, r24
  a2:	03 2e       	mov	r0, r19
  a4:	00 0c       	add	r0, r0
  a6:	44 0b       	sbc	r20, r20
  a8:	55 0b       	sbc	r21, r21
  aa:	60 e2       	ldi	r22, 0x20	; 32
  ac:	71 ea       	ldi	r23, 0xA1	; 161
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 9a 00 	call	0x134	; 0x134 <__divmodsi4>
  b6:	da 01       	movw	r26, r20
  b8:	c9 01       	movw	r24, r18
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	a1 09       	sbc	r26, r1
  be:	b1 09       	sbc	r27, r1
  c0:	89 2f       	mov	r24, r25
  c2:	9a 2f       	mov	r25, r26
  c4:	ab 2f       	mov	r26, r27
  c6:	bb 27       	eor	r27, r27
  c8:	a7 fd       	sbrc	r26, 7
  ca:	ba 95       	dec	r27
  cc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 61       	ori	r24, 0x18	; 24
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <USART_Transmit>:
  e2:	e0 ec       	ldi	r30, 0xC0	; 192
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	95 ff       	sbrs	r25, 5
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <USART_Transmit+0x4>
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  f0:	08 95       	ret

000000f2 <USART_Transmit_String>:
void USART_Transmit_String( char *p)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
	int i=0;
	while(*(p+i)!='\0')
  f8:	88 81       	ld	r24, Y
  fa:	88 23       	and	r24, r24
  fc:	31 f0       	breq	.+12     	; 0x10a <USART_Transmit_String+0x18>
  fe:	21 96       	adiw	r28, 0x01	; 1
	{
		 USART_Transmit(*(p+i));
 100:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit>
	return UDR0;
}
void USART_Transmit_String( char *p)
{
	int i=0;
	while(*(p+i)!='\0')
 104:	89 91       	ld	r24, Y+
 106:	81 11       	cpse	r24, r1
 108:	fb cf       	rjmp	.-10     	; 0x100 <USART_Transmit_String+0xe>
	{
		 USART_Transmit(*(p+i));
		 i++;
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <main>:
#include <avr/io.h>
#include "MyUSART.h"
#include <util/delay.h>
int main(void)
{
    USART_Init(9600);/* Replace with your application code */
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	95 e2       	ldi	r25, 0x25	; 37
 114:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
    while (1) 
    {
		USART_Transmit_String("HELLO Ruthrapathy!!How are you?Hope you are good");
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 e6       	ldi	r24, 0x69	; 105
 124:	98 e1       	ldi	r25, 0x18	; 24
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x16>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x20>
 130:	00 00       	nop
 132:	f2 cf       	rjmp	.-28     	; 0x118 <main+0x8>

00000134 <__divmodsi4>:
 134:	05 2e       	mov	r0, r21
 136:	97 fb       	bst	r25, 7
 138:	1e f4       	brtc	.+6      	; 0x140 <__divmodsi4+0xc>
 13a:	00 94       	com	r0
 13c:	0e 94 b1 00 	call	0x162	; 0x162 <__negsi2>
 140:	57 fd       	sbrc	r21, 7
 142:	07 d0       	rcall	.+14     	; 0x152 <__divmodsi4_neg2>
 144:	0e 94 b9 00 	call	0x172	; 0x172 <__udivmodsi4>
 148:	07 fc       	sbrc	r0, 7
 14a:	03 d0       	rcall	.+6      	; 0x152 <__divmodsi4_neg2>
 14c:	4e f4       	brtc	.+18     	; 0x160 <__divmodsi4_exit>
 14e:	0c 94 b1 00 	jmp	0x162	; 0x162 <__negsi2>

00000152 <__divmodsi4_neg2>:
 152:	50 95       	com	r21
 154:	40 95       	com	r20
 156:	30 95       	com	r19
 158:	21 95       	neg	r18
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	4f 4f       	sbci	r20, 0xFF	; 255
 15e:	5f 4f       	sbci	r21, 0xFF	; 255

00000160 <__divmodsi4_exit>:
 160:	08 95       	ret

00000162 <__negsi2>:
 162:	90 95       	com	r25
 164:	80 95       	com	r24
 166:	70 95       	com	r23
 168:	61 95       	neg	r22
 16a:	7f 4f       	sbci	r23, 0xFF	; 255
 16c:	8f 4f       	sbci	r24, 0xFF	; 255
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	08 95       	ret

00000172 <__udivmodsi4>:
 172:	a1 e2       	ldi	r26, 0x21	; 33
 174:	1a 2e       	mov	r1, r26
 176:	aa 1b       	sub	r26, r26
 178:	bb 1b       	sub	r27, r27
 17a:	fd 01       	movw	r30, r26
 17c:	0d c0       	rjmp	.+26     	; 0x198 <__udivmodsi4_ep>

0000017e <__udivmodsi4_loop>:
 17e:	aa 1f       	adc	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	ee 1f       	adc	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	a2 17       	cp	r26, r18
 188:	b3 07       	cpc	r27, r19
 18a:	e4 07       	cpc	r30, r20
 18c:	f5 07       	cpc	r31, r21
 18e:	20 f0       	brcs	.+8      	; 0x198 <__udivmodsi4_ep>
 190:	a2 1b       	sub	r26, r18
 192:	b3 0b       	sbc	r27, r19
 194:	e4 0b       	sbc	r30, r20
 196:	f5 0b       	sbc	r31, r21

00000198 <__udivmodsi4_ep>:
 198:	66 1f       	adc	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	88 1f       	adc	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	1a 94       	dec	r1
 1a2:	69 f7       	brne	.-38     	; 0x17e <__udivmodsi4_loop>
 1a4:	60 95       	com	r22
 1a6:	70 95       	com	r23
 1a8:	80 95       	com	r24
 1aa:	90 95       	com	r25
 1ac:	9b 01       	movw	r18, r22
 1ae:	ac 01       	movw	r20, r24
 1b0:	bd 01       	movw	r22, r26
 1b2:	cf 01       	movw	r24, r30
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
