
I2C Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076a  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
	while(*(p+i)!='\0')
	{
		 USART_Transmit(*(p+i));
		 i++;
	}
}
  80:	9c 01       	movw	r18, r24
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	80 83       	st	Z, r24
  8c:	03 2e       	mov	r0, r19
  8e:	00 0c       	add	r0, r0
  90:	44 0b       	sbc	r20, r20
  92:	55 0b       	sbc	r21, r21
  94:	60 e2       	ldi	r22, 0x20	; 32
  96:	71 ea       	ldi	r23, 0xA1	; 161
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__divmodsi4>
  a0:	da 01       	movw	r26, r20
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	a1 09       	sbc	r26, r1
  a8:	b1 09       	sbc	r27, r1
  aa:	89 2f       	mov	r24, r25
  ac:	9a 2f       	mov	r25, r26
  ae:	ab 2f       	mov	r26, r27
  b0:	bb 27       	eor	r27, r27
  b2:	a7 fd       	sbrc	r26, 7
  b4:	ba 95       	dec	r27
  b6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c0:	e1 ec       	ldi	r30, 0xC1	; 193
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <USART_Transmit>:
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	95 ff       	sbrs	r25, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <USART_Transmit+0x4>
  d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  da:	08 95       	ret

000000dc <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "MyUSART.h"
int main(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	USART_Init(9600);
  e6:	80 e8       	ldi	r24, 0x80	; 128
  e8:	95 e2       	ldi	r25, 0x25	; 37
  ea:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
	DDRD|=1<<2;
  ee:	52 9a       	sbi	0x0a, 2	; 10
   TWAR|=1<<0;//Enable Response for the general call
  f0:	ea eb       	ldi	r30, 0xBA	; 186
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
   TWCR|=(1<<TWEA|1<<TWEN);
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	84 64       	ori	r24, 0x44	; 68
 102:	80 83       	st	Z, r24
   TWCR&=~(1<<TWSTA|1<<TWSTO);
 104:	80 81       	ld	r24, Z
 106:	8f 7c       	andi	r24, 0xCF	; 207
 108:	80 83       	st	Z, r24
			
		}
		//USART_Transmit('B');
		USART_Transmit('\n');
		//_delay_ms(5000);*/
		 while ((TWCR &(1<<TWINT))==1);
 10a:	0c eb       	ldi	r16, 0xBC	; 188
 10c:	10 e0       	ldi	r17, 0x00	; 0
		 {
				 if((TWSR & 0xF8) ==0x70)
 10e:	0f 2e       	mov	r0, r31
 110:	f9 eb       	ldi	r31, 0xB9	; 185
 112:	cf 2e       	mov	r12, r31
 114:	d1 2c       	mov	r13, r1
 116:	f0 2d       	mov	r31, r0
				 }
		
				 if((TWSR & 0xF8) ==0x90)
				 {
					 TWCR&=~(1<<TWINT);
					 a=TWDR;
 118:	0f 2e       	mov	r0, r31
 11a:	fb eb       	ldi	r31, 0xBB	; 187
 11c:	ef 2e       	mov	r14, r31
 11e:	f1 2c       	mov	r15, r1
 120:	f0 2d       	mov	r31, r0
					 TWCR&=~(1<<TWSTO);
					 TWCR|=1<<TWINT|1<<TWEA;
					 PORTD^=1<<2;
 122:	68 94       	set
 124:	bb 24       	eor	r11, r11
 126:	b2 f8       	bld	r11, 2
			
		}
		//USART_Transmit('B');
		USART_Transmit('\n');
		//_delay_ms(5000);*/
		 while ((TWCR &(1<<TWINT))==1);
 128:	f8 01       	movw	r30, r16
 12a:	80 81       	ld	r24, Z
		 {
				 if((TWSR & 0xF8) ==0x70)
 12c:	f6 01       	movw	r30, r12
 12e:	80 81       	ld	r24, Z
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	80 37       	cpi	r24, 0x70	; 112
 134:	51 f4       	brne	.+20     	; 0x14a <main+0x6e>
				 {
					  TWCR&=~(1<<TWINT);
 136:	f8 01       	movw	r30, r16
 138:	80 81       	ld	r24, Z
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	80 83       	st	Z, r24
					 TWCR&=~(1<<TWSTO);
 13e:	80 81       	ld	r24, Z
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	80 83       	st	Z, r24
					 TWCR|=1<<TWINT|1<<TWEA;
 144:	80 81       	ld	r24, Z
 146:	80 6c       	ori	r24, 0xC0	; 192
 148:	80 83       	st	Z, r24
				 }
		
				 if((TWSR & 0xF8) ==0x90)
 14a:	f6 01       	movw	r30, r12
 14c:	80 81       	ld	r24, Z
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	80 39       	cpi	r24, 0x90	; 144
 152:	a9 f4       	brne	.+42     	; 0x17e <main+0xa2>
				 {
					 TWCR&=~(1<<TWINT);
 154:	f8 01       	movw	r30, r16
 156:	80 81       	ld	r24, Z
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	80 83       	st	Z, r24
					 a=TWDR;
 15c:	f7 01       	movw	r30, r14
 15e:	80 81       	ld	r24, Z
 160:	89 83       	std	Y+1, r24	; 0x01
					 TWCR&=~(1<<TWSTO);
 162:	f8 01       	movw	r30, r16
 164:	80 81       	ld	r24, Z
 166:	8f 7e       	andi	r24, 0xEF	; 239
 168:	80 83       	st	Z, r24
					 TWCR|=1<<TWINT|1<<TWEA;
 16a:	80 81       	ld	r24, Z
 16c:	80 6c       	ori	r24, 0xC0	; 192
 16e:	80 83       	st	Z, r24
					 PORTD^=1<<2;
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8b 25       	eor	r24, r11
 174:	8b b9       	out	0x0b, r24	; 11
					 USART_Transmit(a);
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Transmit>
					 a=0x00; 
 17c:	19 82       	std	Y+1, r1	; 0x01
					 
				 }
				 if((TWSR & 0xF8) ==0xA0)
 17e:	f6 01       	movw	r30, r12
 180:	80 81       	ld	r24, Z
 182:	88 7f       	andi	r24, 0xF8	; 248
 184:	80 3a       	cpi	r24, 0xA0	; 160
 186:	81 f6       	brne	.-96     	; 0x128 <main+0x4c>
				 {
					  TWCR&=~(1<<TWINT);
 188:	f8 01       	movw	r30, r16
 18a:	80 81       	ld	r24, Z
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	80 83       	st	Z, r24
					
					 TWCR|=(1<<TWEA);
 190:	80 81       	ld	r24, Z
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 83       	st	Z, r24
					 TWCR&=~(1<<TWSTA|1<<TWSTO);
 196:	80 81       	ld	r24, Z
 198:	8f 7c       	andi	r24, 0xCF	; 207
 19a:	80 83       	st	Z, r24
					 TWCR|=1<<TWINT;
 19c:	80 81       	ld	r24, Z
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	80 83       	st	Z, r24
 1a2:	c2 cf       	rjmp	.-124    	; 0x128 <main+0x4c>

000001a4 <__divmodsi4>:
 1a4:	05 2e       	mov	r0, r21
 1a6:	97 fb       	bst	r25, 7
 1a8:	1e f4       	brtc	.+6      	; 0x1b0 <__divmodsi4+0xc>
 1aa:	00 94       	com	r0
 1ac:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__negsi2>
 1b0:	57 fd       	sbrc	r21, 7
 1b2:	07 d0       	rcall	.+14     	; 0x1c2 <__divmodsi4_neg2>
 1b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__udivmodsi4>
 1b8:	07 fc       	sbrc	r0, 7
 1ba:	03 d0       	rcall	.+6      	; 0x1c2 <__divmodsi4_neg2>
 1bc:	4e f4       	brtc	.+18     	; 0x1d0 <__divmodsi4_exit>
 1be:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__negsi2>

000001c2 <__divmodsi4_neg2>:
 1c2:	50 95       	com	r21
 1c4:	40 95       	com	r20
 1c6:	30 95       	com	r19
 1c8:	21 95       	neg	r18
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	4f 4f       	sbci	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255

000001d0 <__divmodsi4_exit>:
 1d0:	08 95       	ret

000001d2 <__negsi2>:
 1d2:	90 95       	com	r25
 1d4:	80 95       	com	r24
 1d6:	70 95       	com	r23
 1d8:	61 95       	neg	r22
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	8f 4f       	sbci	r24, 0xFF	; 255
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	08 95       	ret

000001e2 <__udivmodsi4>:
 1e2:	a1 e2       	ldi	r26, 0x21	; 33
 1e4:	1a 2e       	mov	r1, r26
 1e6:	aa 1b       	sub	r26, r26
 1e8:	bb 1b       	sub	r27, r27
 1ea:	fd 01       	movw	r30, r26
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <__udivmodsi4_ep>

000001ee <__udivmodsi4_loop>:
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	ee 1f       	adc	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	a2 17       	cp	r26, r18
 1f8:	b3 07       	cpc	r27, r19
 1fa:	e4 07       	cpc	r30, r20
 1fc:	f5 07       	cpc	r31, r21
 1fe:	20 f0       	brcs	.+8      	; 0x208 <__udivmodsi4_ep>
 200:	a2 1b       	sub	r26, r18
 202:	b3 0b       	sbc	r27, r19
 204:	e4 0b       	sbc	r30, r20
 206:	f5 0b       	sbc	r31, r21

00000208 <__udivmodsi4_ep>:
 208:	66 1f       	adc	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	1a 94       	dec	r1
 212:	69 f7       	brne	.-38     	; 0x1ee <__udivmodsi4_loop>
 214:	60 95       	com	r22
 216:	70 95       	com	r23
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
 220:	bd 01       	movw	r22, r26
 222:	cf 01       	movw	r24, r30
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
