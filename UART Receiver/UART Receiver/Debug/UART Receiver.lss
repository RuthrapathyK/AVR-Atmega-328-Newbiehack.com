
UART Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  00001115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c2  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
	while(*(p+i)!='\0')
	{
		 USART_Transmit(*(p+i));
		 i++;
	}
}
  80:	9c 01       	movw	r18, r24
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	80 83       	st	Z, r24
  8c:	03 2e       	mov	r0, r19
  8e:	00 0c       	add	r0, r0
  90:	44 0b       	sbc	r20, r20
  92:	55 0b       	sbc	r21, r21
  94:	60 e2       	ldi	r22, 0x20	; 32
  96:	71 ea       	ldi	r23, 0xA1	; 161
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 a9 00 	call	0x152	; 0x152 <__divmodsi4>
  a0:	da 01       	movw	r26, r20
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	a1 09       	sbc	r26, r1
  a8:	b1 09       	sbc	r27, r1
  aa:	89 2f       	mov	r24, r25
  ac:	9a 2f       	mov	r25, r26
  ae:	ab 2f       	mov	r26, r27
  b0:	bb 27       	eor	r27, r27
  b2:	a7 fd       	sbrc	r26, 7
  b4:	ba 95       	dec	r27
  b6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c0:	e1 ec       	ldi	r30, 0xC1	; 193
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <USART_Receive>:
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <USART_Receive+0x4>
  d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  da:	08 95       	ret

000000dc <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "MyUSART.h"
int main(void)
{
	DDRB|=1<<5;
  dc:	25 9a       	sbi	0x04, 5	; 4
	sei();
  de:	78 94       	sei
	UCSR0B|=1<<RXCIE0;
  e0:	e1 ec       	ldi	r30, 0xC1	; 193
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
	UCSR0A|=1<<RXC0;
  ea:	e0 ec       	ldi	r30, 0xC0	; 192
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
	USART_Init(9600);
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	95 e2       	ldi	r25, 0x25	; 37
  f8:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x20>

000000fe <__vector_18>:
	while(1)
	{
	}	
}
ISR(USART_RX_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	char b=USART_Receive();
 120:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Receive>
	if(b=='a')
 124:	81 36       	cpi	r24, 0x61	; 97
 126:	21 f4       	brne	.+8      	; 0x130 <__vector_18+0x32>
	PORTB^=1<<5;
 128:	95 b1       	in	r25, 0x05	; 5
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	89 27       	eor	r24, r25
 12e:	85 b9       	out	0x05, r24	; 5
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__divmodsi4>:
 152:	05 2e       	mov	r0, r21
 154:	97 fb       	bst	r25, 7
 156:	1e f4       	brtc	.+6      	; 0x15e <__divmodsi4+0xc>
 158:	00 94       	com	r0
 15a:	0e 94 c0 00 	call	0x180	; 0x180 <__negsi2>
 15e:	57 fd       	sbrc	r21, 7
 160:	07 d0       	rcall	.+14     	; 0x170 <__divmodsi4_neg2>
 162:	0e 94 c8 00 	call	0x190	; 0x190 <__udivmodsi4>
 166:	07 fc       	sbrc	r0, 7
 168:	03 d0       	rcall	.+6      	; 0x170 <__divmodsi4_neg2>
 16a:	4e f4       	brtc	.+18     	; 0x17e <__divmodsi4_exit>
 16c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__negsi2>

00000170 <__divmodsi4_neg2>:
 170:	50 95       	com	r21
 172:	40 95       	com	r20
 174:	30 95       	com	r19
 176:	21 95       	neg	r18
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	4f 4f       	sbci	r20, 0xFF	; 255
 17c:	5f 4f       	sbci	r21, 0xFF	; 255

0000017e <__divmodsi4_exit>:
 17e:	08 95       	ret

00000180 <__negsi2>:
 180:	90 95       	com	r25
 182:	80 95       	com	r24
 184:	70 95       	com	r23
 186:	61 95       	neg	r22
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	8f 4f       	sbci	r24, 0xFF	; 255
 18c:	9f 4f       	sbci	r25, 0xFF	; 255
 18e:	08 95       	ret

00000190 <__udivmodsi4>:
 190:	a1 e2       	ldi	r26, 0x21	; 33
 192:	1a 2e       	mov	r1, r26
 194:	aa 1b       	sub	r26, r26
 196:	bb 1b       	sub	r27, r27
 198:	fd 01       	movw	r30, r26
 19a:	0d c0       	rjmp	.+26     	; 0x1b6 <__udivmodsi4_ep>

0000019c <__udivmodsi4_loop>:
 19c:	aa 1f       	adc	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	ee 1f       	adc	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	a2 17       	cp	r26, r18
 1a6:	b3 07       	cpc	r27, r19
 1a8:	e4 07       	cpc	r30, r20
 1aa:	f5 07       	cpc	r31, r21
 1ac:	20 f0       	brcs	.+8      	; 0x1b6 <__udivmodsi4_ep>
 1ae:	a2 1b       	sub	r26, r18
 1b0:	b3 0b       	sbc	r27, r19
 1b2:	e4 0b       	sbc	r30, r20
 1b4:	f5 0b       	sbc	r31, r21

000001b6 <__udivmodsi4_ep>:
 1b6:	66 1f       	adc	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	88 1f       	adc	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	1a 94       	dec	r1
 1c0:	69 f7       	brne	.-38     	; 0x19c <__udivmodsi4_loop>
 1c2:	60 95       	com	r22
 1c4:	70 95       	com	r23
 1c6:	80 95       	com	r24
 1c8:	90 95       	com	r25
 1ca:	9b 01       	movw	r18, r22
 1cc:	ac 01       	movw	r20, r24
 1ce:	bd 01       	movw	r22, r26
 1d0:	cf 01       	movw	r24, r30
 1d2:	08 95       	ret

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
