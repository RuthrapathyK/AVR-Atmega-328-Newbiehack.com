
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dbb  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077c  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b0  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008f0  00000000  00000000  00002559  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <enabling>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2a 9a       	sbi	0x05, 2	; 5
  82:	81 e2       	ldi	r24, 0x21	; 33
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <enabling+0x4>
  88:	00 00       	nop
  8a:	2a 98       	cbi	0x05, 2	; 5
  8c:	89 ef       	ldi	r24, 0xF9	; 249
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <enabling+0x10>
  94:	00 c0       	rjmp	.+0      	; 0x96 <enabling+0x16>
  96:	00 00       	nop
  98:	08 95       	ret

0000009a <Check_busy>:
  9a:	1a b8       	out	0x0a, r1	; 10
  9c:	28 98       	cbi	0x05, 0	; 5
  9e:	29 9a       	sbi	0x05, 1	; 5
  a0:	81 e2       	ldi	r24, 0x21	; 33
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <Check_busy+0x8>
  a6:	00 00       	nop
  a8:	2f 9b       	sbis	0x05, 7	; 5
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <Check_busy+0x1a>
  ac:	0e 94 40 00 	call	0x80	; 0x80 <enabling>
  b0:	2f 99       	sbic	0x05, 7	; 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <Check_busy+0x12>
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	08 95       	ret

000000ba <Send_command>:
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
  be:	0e 94 4d 00 	call	0x9a	; 0x9a <Check_busy>
  c2:	cb b9       	out	0x0b, r28	; 11
  c4:	28 98       	cbi	0x05, 0	; 5
  c6:	29 98       	cbi	0x05, 1	; 5
  c8:	81 e2       	ldi	r24, 0x21	; 33
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <Send_command+0x10>
  ce:	00 00       	nop
  d0:	0e 94 40 00 	call	0x80	; 0x80 <enabling>
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <Send_character>:
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
  dc:	0e 94 4d 00 	call	0x9a	; 0x9a <Check_busy>
  e0:	cb b9       	out	0x0b, r28	; 11
  e2:	28 9a       	sbi	0x05, 0	; 5
  e4:	29 98       	cbi	0x05, 1	; 5
  e6:	81 e2       	ldi	r24, 0x21	; 33
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <Send_character+0x10>
  ec:	00 00       	nop
  ee:	0e 94 40 00 	call	0x80	; 0x80 <enabling>
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <Send_string>:
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
  fc:	88 81       	ld	r24, Y
  fe:	88 23       	and	r24, r24
 100:	51 f0       	breq	.+20     	; 0x116 <Send_string+0x20>
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	0e 94 6c 00 	call	0xd8	; 0xd8 <Send_character>
 108:	80 e1       	ldi	r24, 0x10	; 16
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <Send_string+0x14>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <Send_string+0x1a>
 110:	89 91       	ld	r24, Y+
 112:	81 11       	cpse	r24, r1
 114:	f7 cf       	rjmp	.-18     	; 0x104 <Send_string+0xe>
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <Send_variable>:
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	2a 97       	sbiw	r28, 0x0a	; 10
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	d9 f1       	breq	.+118    	; 0x1b2 <Send_variable+0x96>
 13c:	9e 01       	movw	r18, r28
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	89 01       	movw	r16, r18
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	0f 2e       	mov	r0, r31
 14a:	fa e0       	ldi	r31, 0x0A	; 10
 14c:	ef 2e       	mov	r14, r31
 14e:	f1 2c       	mov	r15, r1
 150:	f0 2d       	mov	r31, r0
 152:	01 c0       	rjmp	.+2      	; 0x156 <Send_variable+0x3a>
 154:	fa 01       	movw	r30, r20
 156:	b7 01       	movw	r22, r14
 158:	0e 94 b3 01 	call	0x366	; 0x366 <__divmodhi4>
 15c:	80 5d       	subi	r24, 0xD0	; 208
 15e:	d8 01       	movw	r26, r16
 160:	8d 93       	st	X+, r24
 162:	8d 01       	movw	r16, r26
 164:	86 2f       	mov	r24, r22
 166:	97 2f       	mov	r25, r23
 168:	af 01       	movw	r20, r30
 16a:	4f 5f       	subi	r20, 0xFF	; 255
 16c:	5f 4f       	sbci	r21, 0xFF	; 255
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	89 f7       	brne	.-30     	; 0x154 <Send_variable+0x38>
 172:	de 01       	movw	r26, r28
 174:	a4 0f       	add	r26, r20
 176:	b5 1f       	adc	r27, r21
 178:	11 96       	adiw	r26, 0x01	; 1
 17a:	1c 92       	st	X, r1
 17c:	1e 16       	cp	r1, r30
 17e:	1f 06       	cpc	r1, r31
 180:	9c f4       	brge	.+38     	; 0x1a8 <Send_variable+0x8c>
 182:	bf 01       	movw	r22, r30
 184:	ec 0f       	add	r30, r28
 186:	fd 1f       	adc	r31, r29
 188:	32 96       	adiw	r30, 0x02	; 2
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	d9 01       	movw	r26, r18
 190:	4c 91       	ld	r20, X
 192:	52 91       	ld	r21, -Z
 194:	5d 93       	st	X+, r21
 196:	9d 01       	movw	r18, r26
 198:	40 83       	st	Z, r20
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	ab 01       	movw	r20, r22
 19e:	48 1b       	sub	r20, r24
 1a0:	59 0b       	sbc	r21, r25
 1a2:	84 17       	cp	r24, r20
 1a4:	95 07       	cpc	r25, r21
 1a6:	9c f3       	brlt	.-26     	; 0x18e <Send_variable+0x72>
 1a8:	ce 01       	movw	r24, r28
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	0e 94 7b 00 	call	0xf6	; 0xf6 <Send_string>
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <Send_variable+0x9a>
 1b2:	19 82       	std	Y+1, r1	; 0x01
 1b4:	f9 cf       	rjmp	.-14     	; 0x1a8 <Send_variable+0x8c>
 1b6:	2a 96       	adiw	r28, 0x0a	; 10
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <Set_cursor>:
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
 1da:	8b 01       	movw	r16, r22
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 5d 00 	call	0xba	; 0xba <Send_command>
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <Set_cursor+0x16>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <Set_cursor+0x1c>
 1ec:	00 00       	nop
 1ee:	20 97       	sbiw	r28, 0x00	; 0
 1f0:	69 f5       	brne	.+90     	; 0x24c <Set_cursor+0x7c>
 1f2:	10 16       	cp	r1, r16
 1f4:	11 06       	cpc	r1, r17
 1f6:	64 f5       	brge	.+88     	; 0x250 <Set_cursor+0x80>
 1f8:	c1 e0       	ldi	r28, 0x01	; 1
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	84 e1       	ldi	r24, 0x14	; 20
 1fe:	0e 94 5d 00 	call	0xba	; 0xba <Send_command>
 202:	91 e2       	ldi	r25, 0x21	; 33
 204:	9a 95       	dec	r25
 206:	f1 f7       	brne	.-4      	; 0x204 <Set_cursor+0x34>
 208:	00 00       	nop
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	0c 17       	cp	r16, r28
 20e:	1d 07       	cpc	r17, r29
 210:	ac f7       	brge	.-22     	; 0x1fc <Set_cursor+0x2c>
 212:	1e c0       	rjmp	.+60     	; 0x250 <Set_cursor+0x80>
 214:	c8 e2       	ldi	r28, 0x28	; 40
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	84 e1       	ldi	r24, 0x14	; 20
 21a:	0e 94 5d 00 	call	0xba	; 0xba <Send_command>
 21e:	81 e2       	ldi	r24, 0x21	; 33
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <Set_cursor+0x50>
 224:	00 00       	nop
 226:	21 97       	sbiw	r28, 0x01	; 1
 228:	b9 f7       	brne	.-18     	; 0x218 <Set_cursor+0x48>
 22a:	10 16       	cp	r1, r16
 22c:	11 06       	cpc	r1, r17
 22e:	84 f4       	brge	.+32     	; 0x250 <Set_cursor+0x80>
 230:	c1 e0       	ldi	r28, 0x01	; 1
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	84 e1       	ldi	r24, 0x14	; 20
 236:	0e 94 5d 00 	call	0xba	; 0xba <Send_command>
 23a:	91 e2       	ldi	r25, 0x21	; 33
 23c:	9a 95       	dec	r25
 23e:	f1 f7       	brne	.-4      	; 0x23c <Set_cursor+0x6c>
 240:	00 00       	nop
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	0c 17       	cp	r16, r28
 246:	1d 07       	cpc	r17, r29
 248:	ac f7       	brge	.-22     	; 0x234 <Set_cursor+0x64>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <Set_cursor+0x80>
 24c:	21 97       	sbiw	r28, 0x01	; 1
 24e:	11 f3       	breq	.-60     	; 0x214 <Set_cursor+0x44>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <LCD_initialise>:
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	87 60       	ori	r24, 0x07	; 7
 25e:	84 b9       	out	0x04, r24	; 4
 260:	87 ea       	ldi	r24, 0xA7	; 167
 262:	91 e6       	ldi	r25, 0x61	; 97
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_initialise+0xa>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_initialise+0x10>
 26a:	00 00       	nop
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 5d 00 	call	0xba	; 0xba <Send_command>
 272:	83 ed       	ldi	r24, 0xD3	; 211
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_initialise+0x1c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_initialise+0x22>
 27c:	00 00       	nop
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	0e 94 5d 00 	call	0xba	; 0xba <Send_command>
 284:	91 e2       	ldi	r25, 0x21	; 33
 286:	9a 95       	dec	r25
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_initialise+0x2c>
 28a:	00 00       	nop
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	0e 94 5d 00 	call	0xba	; 0xba <Send_command>
 292:	81 e2       	ldi	r24, 0x21	; 33
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_initialise+0x3a>
 298:	00 00       	nop
 29a:	08 95       	ret

0000029c <main>:
#include <avr/interrupt.h>
#include "LCD.h"

int main(void)
{
	LCD_initialise();
 29c:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_initialise>
   PRR&=~(1<<PRADC);  //written 0 to enable adc
 2a0:	e4 e6       	ldi	r30, 0x64	; 100
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	80 83       	st	Z, r24
   
   ADCSRA|=(1<<ADPS2);//prescalar
 2aa:	ea e7       	ldi	r30, 0x7A	; 122
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	84 60       	ori	r24, 0x04	; 4
 2b2:	80 83       	st	Z, r24
   //ADMUX|=(1<<ADLAR); //left adjusted to become 8 bit;
   ADCSRA |=(1<<ADIE);//enable adc interrupt
 2b4:	80 81       	ld	r24, Z
 2b6:	88 60       	ori	r24, 0x08	; 8
 2b8:	80 83       	st	Z, r24
   ADCSRA|=(1<<ADEN); //enable adc for AVcc and A0 channel comes to effect
 2ba:	80 81       	ld	r24, Z
 2bc:	80 68       	ori	r24, 0x80	; 128
 2be:	80 83       	st	Z, r24
   ADMUX&=~(1<<REFS1);   
 2c0:	ec e7       	ldi	r30, 0x7C	; 124
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	8f 77       	andi	r24, 0x7F	; 127
 2c8:	80 83       	st	Z, r24
   ADMUX|=(1<<REFS0);	//write 01 in ADMUX to select AVcc with external capacitors
 2ca:	80 81       	ld	r24, Z
 2cc:	80 64       	ori	r24, 0x40	; 64
 2ce:	80 83       	st	Z, r24
    
	ADMUX&=~(1<<MUX3|1<<MUX2|1<<MUX1|1<<MUX0);//write 0000 in ADMUX to select A0 channel
 2d0:	80 81       	ld	r24, Z
 2d2:	80 7f       	andi	r24, 0xF0	; 240
 2d4:	80 83       	st	Z, r24
	
	
	
	
	
	sei();//enable global interrupt
 2d6:	78 94       	sei
	
	
		
	while (1) 
    {
   ADCSRA |=(1<<ADSC); //start conversion
 2d8:	ea e7       	ldi	r30, 0x7A	; 122
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	80 83       	st	Z, r24
 2e2:	fc cf       	rjmp	.-8      	; 0x2dc <main+0x40>

000002e4 <__vector_21>:

    }
}
ISR(ADC_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	int b=ADCL;
 30a:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	int a=ADCH;
 30e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	int c=(a<<8)|b;
 312:	d0 e0       	ldi	r29, 0x00	; 0
 314:	d8 2b       	or	r29, r24
	Set_cursor(0,0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Set_cursor>
	Send_variable(c);
 322:	ce 01       	movw	r24, r28
 324:	0e 94 8e 00 	call	0x11c	; 0x11c <Send_variable>
	Send_character(' ');
 328:	80 e2       	ldi	r24, 0x20	; 32
 32a:	0e 94 6c 00 	call	0xd8	; 0xd8 <Send_character>
 32e:	2f e3       	ldi	r18, 0x3F	; 63
 330:	8d e0       	ldi	r24, 0x0D	; 13
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <__vector_21+0x50>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <__vector_21+0x5a>
 33e:	00 00       	nop
	_delay_ms(1000);
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <__divmodhi4>:
 366:	97 fb       	bst	r25, 7
 368:	07 2e       	mov	r0, r23
 36a:	16 f4       	brtc	.+4      	; 0x370 <__divmodhi4+0xa>
 36c:	00 94       	com	r0
 36e:	07 d0       	rcall	.+14     	; 0x37e <__divmodhi4_neg1>
 370:	77 fd       	sbrc	r23, 7
 372:	09 d0       	rcall	.+18     	; 0x386 <__divmodhi4_neg2>
 374:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodhi4>
 378:	07 fc       	sbrc	r0, 7
 37a:	05 d0       	rcall	.+10     	; 0x386 <__divmodhi4_neg2>
 37c:	3e f4       	brtc	.+14     	; 0x38c <__divmodhi4_exit>

0000037e <__divmodhi4_neg1>:
 37e:	90 95       	com	r25
 380:	81 95       	neg	r24
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	08 95       	ret

00000386 <__divmodhi4_neg2>:
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255

0000038c <__divmodhi4_exit>:
 38c:	08 95       	ret

0000038e <__udivmodhi4>:
 38e:	aa 1b       	sub	r26, r26
 390:	bb 1b       	sub	r27, r27
 392:	51 e1       	ldi	r21, 0x11	; 17
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <__udivmodhi4_ep>

00000396 <__udivmodhi4_loop>:
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	a6 17       	cp	r26, r22
 39c:	b7 07       	cpc	r27, r23
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__udivmodhi4_ep>
 3a0:	a6 1b       	sub	r26, r22
 3a2:	b7 0b       	sbc	r27, r23

000003a4 <__udivmodhi4_ep>:
 3a4:	88 1f       	adc	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	5a 95       	dec	r21
 3aa:	a9 f7       	brne	.-22     	; 0x396 <__udivmodhi4_loop>
 3ac:	80 95       	com	r24
 3ae:	90 95       	com	r25
 3b0:	bc 01       	movw	r22, r24
 3b2:	cd 01       	movw	r24, r26
 3b4:	08 95       	ret

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
