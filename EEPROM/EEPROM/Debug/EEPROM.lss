
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084d  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000731  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000370  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016c  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 75 00 	call	0xea	; 0xea <main>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	9c 01       	movw	r18, r24
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	80 83       	st	Z, r24
  8c:	03 2e       	mov	r0, r19
  8e:	00 0c       	add	r0, r0
  90:	44 0b       	sbc	r20, r20
  92:	55 0b       	sbc	r21, r21
  94:	60 e2       	ldi	r22, 0x20	; 32
  96:	71 ea       	ldi	r23, 0xA1	; 161
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 7f 00 	call	0xfe	; 0xfe <__divmodsi4>
  a0:	da 01       	movw	r26, r20
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	a1 09       	sbc	r26, r1
  a8:	b1 09       	sbc	r27, r1
  aa:	89 2f       	mov	r24, r25
  ac:	9a 2f       	mov	r25, r26
  ae:	ab 2f       	mov	r26, r27
  b0:	bb 27       	eor	r27, r27
  b2:	a7 fd       	sbrc	r26, 7
  b4:	ba 95       	dec	r27
  b6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c0:	e1 ec       	ldi	r30, 0xC1	; 193
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <USART_Transmit>:
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	95 ff       	sbrs	r25, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <USART_Transmit+0x4>
  d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  da:	08 95       	ret

000000dc <EEPROM_Read>:
  dc:	f9 99       	sbic	0x1f, 1	; 31
  de:	fe cf       	rjmp	.-4      	; 0xdc <EEPROM_Read>
  e0:	81 bd       	out	0x21, r24	; 33
  e2:	f8 9a       	sbi	0x1f, 0	; 31
  e4:	00 00       	nop
  e6:	80 b5       	in	r24, 0x20	; 32
  e8:	08 95       	ret

000000ea <main>:
		EECR|=1<<EEPE;
		_delay_ms(10);
}
int main(void)
{
	USART_Init(9600);
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	95 e2       	ldi	r25, 0x25	; 37
  ee:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>

	//USART_Transmit('A');
	USART_Transmit(EEPROM_Read(0x00));
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 6e 00 	call	0xdc	; 0xdc <EEPROM_Read>
  f8:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Transmit>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x12>

000000fe <__divmodsi4>:
  fe:	05 2e       	mov	r0, r21
 100:	97 fb       	bst	r25, 7
 102:	1e f4       	brtc	.+6      	; 0x10a <__divmodsi4+0xc>
 104:	00 94       	com	r0
 106:	0e 94 96 00 	call	0x12c	; 0x12c <__negsi2>
 10a:	57 fd       	sbrc	r21, 7
 10c:	07 d0       	rcall	.+14     	; 0x11c <__divmodsi4_neg2>
 10e:	0e 94 9e 00 	call	0x13c	; 0x13c <__udivmodsi4>
 112:	07 fc       	sbrc	r0, 7
 114:	03 d0       	rcall	.+6      	; 0x11c <__divmodsi4_neg2>
 116:	4e f4       	brtc	.+18     	; 0x12a <__divmodsi4_exit>
 118:	0c 94 96 00 	jmp	0x12c	; 0x12c <__negsi2>

0000011c <__divmodsi4_neg2>:
 11c:	50 95       	com	r21
 11e:	40 95       	com	r20
 120:	30 95       	com	r19
 122:	21 95       	neg	r18
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	4f 4f       	sbci	r20, 0xFF	; 255
 128:	5f 4f       	sbci	r21, 0xFF	; 255

0000012a <__divmodsi4_exit>:
 12a:	08 95       	ret

0000012c <__negsi2>:
 12c:	90 95       	com	r25
 12e:	80 95       	com	r24
 130:	70 95       	com	r23
 132:	61 95       	neg	r22
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	8f 4f       	sbci	r24, 0xFF	; 255
 138:	9f 4f       	sbci	r25, 0xFF	; 255
 13a:	08 95       	ret

0000013c <__udivmodsi4>:
 13c:	a1 e2       	ldi	r26, 0x21	; 33
 13e:	1a 2e       	mov	r1, r26
 140:	aa 1b       	sub	r26, r26
 142:	bb 1b       	sub	r27, r27
 144:	fd 01       	movw	r30, r26
 146:	0d c0       	rjmp	.+26     	; 0x162 <__udivmodsi4_ep>

00000148 <__udivmodsi4_loop>:
 148:	aa 1f       	adc	r26, r26
 14a:	bb 1f       	adc	r27, r27
 14c:	ee 1f       	adc	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	a2 17       	cp	r26, r18
 152:	b3 07       	cpc	r27, r19
 154:	e4 07       	cpc	r30, r20
 156:	f5 07       	cpc	r31, r21
 158:	20 f0       	brcs	.+8      	; 0x162 <__udivmodsi4_ep>
 15a:	a2 1b       	sub	r26, r18
 15c:	b3 0b       	sbc	r27, r19
 15e:	e4 0b       	sbc	r30, r20
 160:	f5 0b       	sbc	r31, r21

00000162 <__udivmodsi4_ep>:
 162:	66 1f       	adc	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	88 1f       	adc	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	1a 94       	dec	r1
 16c:	69 f7       	brne	.-38     	; 0x148 <__udivmodsi4_loop>
 16e:	60 95       	com	r22
 170:	70 95       	com	r23
 172:	80 95       	com	r24
 174:	90 95       	com	r25
 176:	9b 01       	movw	r18, r22
 178:	ac 01       	movw	r20, r24
 17a:	bd 01       	movw	r22, r26
 17c:	cf 01       	movw	r24, r30
 17e:	08 95       	ret

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
