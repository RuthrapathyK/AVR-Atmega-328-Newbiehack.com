
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000761  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069e  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  0000108b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010f  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
	while(*(p+i)!='\0')
	{
		 USART_Transmit(*(p+i));
		 i++;
	}
}
  80:	9c 01       	movw	r18, r24
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	80 83       	st	Z, r24
  8c:	03 2e       	mov	r0, r19
  8e:	00 0c       	add	r0, r0
  90:	44 0b       	sbc	r20, r20
  92:	55 0b       	sbc	r21, r21
  94:	60 e4       	ldi	r22, 0x40	; 64
  96:	72 e4       	ldi	r23, 0x42	; 66
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 80 00 	call	0x100	; 0x100 <__divmodsi4>
  a0:	da 01       	movw	r26, r20
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	a1 09       	sbc	r26, r1
  a8:	b1 09       	sbc	r27, r1
  aa:	89 2f       	mov	r24, r25
  ac:	9a 2f       	mov	r25, r26
  ae:	ab 2f       	mov	r26, r27
  b0:	bb 27       	eor	r27, r27
  b2:	a7 fd       	sbrc	r26, 7
  b4:	ba 95       	dec	r27
  b6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c0:	e1 ec       	ldi	r30, 0xC1	; 193
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <USART_Transmit>:
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	95 ff       	sbrs	r25, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <USART_Transmit+0x4>
  d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  da:	08 95       	ret

000000dc <main>:
}*/

int main()
{
	/* Set MISO output, all others input */
	DDRB = (1<<4);
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	USART_Init(9600);
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	95 e2       	ldi	r25, 0x25	; 37
  e4:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
	SPCR = (1<<SPE);
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	8c bd       	out	0x2c, r24	; 44
	SPSR|=1<<SPI2X;
  ec:	8d b5       	in	r24, 0x2d	; 45
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	8d bd       	out	0x2d, r24	; 45
	unsigned char x=0x00;
while(1)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  f2:	0d b4       	in	r0, 0x2d	; 45
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main+0x16>
	;
	/* Return Data Register */
	x=SPDR;
  f8:	8e b5       	in	r24, 0x2e	; 46
	USART_Transmit(x);
  fa:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Transmit>
	x=0x00;
	
}
  fe:	f9 cf       	rjmp	.-14     	; 0xf2 <main+0x16>

00000100 <__divmodsi4>:
 100:	05 2e       	mov	r0, r21
 102:	97 fb       	bst	r25, 7
 104:	1e f4       	brtc	.+6      	; 0x10c <__divmodsi4+0xc>
 106:	00 94       	com	r0
 108:	0e 94 97 00 	call	0x12e	; 0x12e <__negsi2>
 10c:	57 fd       	sbrc	r21, 7
 10e:	07 d0       	rcall	.+14     	; 0x11e <__divmodsi4_neg2>
 110:	0e 94 9f 00 	call	0x13e	; 0x13e <__udivmodsi4>
 114:	07 fc       	sbrc	r0, 7
 116:	03 d0       	rcall	.+6      	; 0x11e <__divmodsi4_neg2>
 118:	4e f4       	brtc	.+18     	; 0x12c <__divmodsi4_exit>
 11a:	0c 94 97 00 	jmp	0x12e	; 0x12e <__negsi2>

0000011e <__divmodsi4_neg2>:
 11e:	50 95       	com	r21
 120:	40 95       	com	r20
 122:	30 95       	com	r19
 124:	21 95       	neg	r18
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	4f 4f       	sbci	r20, 0xFF	; 255
 12a:	5f 4f       	sbci	r21, 0xFF	; 255

0000012c <__divmodsi4_exit>:
 12c:	08 95       	ret

0000012e <__negsi2>:
 12e:	90 95       	com	r25
 130:	80 95       	com	r24
 132:	70 95       	com	r23
 134:	61 95       	neg	r22
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	8f 4f       	sbci	r24, 0xFF	; 255
 13a:	9f 4f       	sbci	r25, 0xFF	; 255
 13c:	08 95       	ret

0000013e <__udivmodsi4>:
 13e:	a1 e2       	ldi	r26, 0x21	; 33
 140:	1a 2e       	mov	r1, r26
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	fd 01       	movw	r30, r26
 148:	0d c0       	rjmp	.+26     	; 0x164 <__udivmodsi4_ep>

0000014a <__udivmodsi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	ee 1f       	adc	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	a2 17       	cp	r26, r18
 154:	b3 07       	cpc	r27, r19
 156:	e4 07       	cpc	r30, r20
 158:	f5 07       	cpc	r31, r21
 15a:	20 f0       	brcs	.+8      	; 0x164 <__udivmodsi4_ep>
 15c:	a2 1b       	sub	r26, r18
 15e:	b3 0b       	sbc	r27, r19
 160:	e4 0b       	sbc	r30, r20
 162:	f5 0b       	sbc	r31, r21

00000164 <__udivmodsi4_ep>:
 164:	66 1f       	adc	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	88 1f       	adc	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	1a 94       	dec	r1
 16e:	69 f7       	brne	.-38     	; 0x14a <__udivmodsi4_loop>
 170:	60 95       	com	r22
 172:	70 95       	com	r23
 174:	80 95       	com	r24
 176:	90 95       	com	r25
 178:	9b 01       	movw	r18, r22
 17a:	ac 01       	movw	r20, r24
 17c:	bd 01       	movw	r22, r26
 17e:	cf 01       	movw	r24, r30
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
