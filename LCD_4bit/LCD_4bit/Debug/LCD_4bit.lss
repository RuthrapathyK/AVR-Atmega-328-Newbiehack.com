
LCD_4bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003ac  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f72  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000750  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bc  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096d  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002fe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8a 01 	call	0x314	; 0x314 <main>
  8e:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <enabling>:
	}
	DDR_DATA|=(1<<D7|1<<D6|1<<D5|1<<D4);
}*/
void enabling(void)
{
	CONTROLPIN|=(1<<EN);
  96:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	81 e2       	ldi	r24, 0x21	; 33
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <enabling+0x4>
  9e:	00 00       	nop
	_delay_us(100);
	CONTROLPIN&=~(1<<EN);
  a0:	2a 98       	cbi	0x05, 2	; 5
  a2:	89 ef       	ldi	r24, 0xF9	; 249
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <enabling+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <enabling+0x16>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <Send_command>:


void Send_command(unsigned char command)
{
	//Check_busy();
	DATAPIN=(command & 0xF0);
  b0:	98 2f       	mov	r25, r24
  b2:	90 7f       	andi	r25, 0xF0	; 240
  b4:	9b b9       	out	0x0b, r25	; 11
	CONTROLPIN&=~(1<<RS);
  b6:	28 98       	cbi	0x05, 0	; 5
	CONTROLPIN&=~(1<<RW);
  b8:	29 98       	cbi	0x05, 1	; 5
  ba:	91 e2       	ldi	r25, 0x21	; 33
  bc:	9a 95       	dec	r25
  be:	f1 f7       	brne	.-4      	; 0xbc <Send_command+0xc>
  c0:	00 00       	nop
	_delay_us(100);
	CONTROLPIN|=(1<<EN);
  c2:	2a 9a       	sbi	0x05, 2	; 5
  c4:	93 e0       	ldi	r25, 0x03	; 3
  c6:	9a 95       	dec	r25
  c8:	f1 f7       	brne	.-4      	; 0xc6 <Send_command+0x16>
  ca:	00 00       	nop
	_delay_us(10);
	CONTROLPIN&=~(1<<EN);
  cc:	2a 98       	cbi	0x05, 2	; 5
  ce:	90 e1       	ldi	r25, 0x10	; 16
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Send_command+0x20>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <Send_command+0x26>
	_delay_us(50);
	DATAPIN=(command<<4);
  d6:	82 95       	swap	r24
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	81 e2       	ldi	r24, 0x21	; 33
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <Send_command+0x2e>
  e2:	00 00       	nop
	_delay_us(100);
	enabling();
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <enabling>
  e8:	08 95       	ret

000000ea <Send_character>:
}
void Send_character(unsigned char character)
{
	//Check_busy();
	DATAPIN=(character &0xF0);
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	9b b9       	out	0x0b, r25	; 11
	CONTROLPIN|=(1<<RS);
  f0:	28 9a       	sbi	0x05, 0	; 5
	CONTROLPIN&=~(1<<RW);
  f2:	29 98       	cbi	0x05, 1	; 5
  f4:	91 e2       	ldi	r25, 0x21	; 33
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Send_character+0xc>
  fa:	00 00       	nop
	_delay_us(100);
	CONTROLPIN|=(1<<EN);
  fc:	2a 9a       	sbi	0x05, 2	; 5
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <Send_character+0x16>
 104:	00 00       	nop
	_delay_us(10);
	CONTROLPIN&=~(1<<EN);
 106:	2a 98       	cbi	0x05, 2	; 5
 108:	90 e1       	ldi	r25, 0x10	; 16
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <Send_character+0x20>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <Send_character+0x26>
	_delay_us(50);
	DATAPIN=(character<<4);
 110:	82 95       	swap	r24
 112:	80 7f       	andi	r24, 0xF0	; 240
 114:	8b b9       	out	0x0b, r24	; 11
 116:	81 e2       	ldi	r24, 0x21	; 33
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <Send_character+0x2e>
 11c:	00 00       	nop
	_delay_us(100);
	enabling();
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <enabling>
 122:	08 95       	ret

00000124 <Send_string>:
	_delay_us(100);
	CONTROLPIN&=~(1<<EN);
	_delay_us(1000);
}
void Send_string(char *p)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
	int i=0;
	while(*(p+i)!='\0')
 12a:	88 81       	ld	r24, Y
 12c:	88 23       	and	r24, r24
 12e:	51 f0       	breq	.+20     	; 0x144 <Send_string+0x20>
 130:	21 96       	adiw	r28, 0x01	; 1
	{
		Send_character(*(p+i));
 132:	0e 94 75 00 	call	0xea	; 0xea <Send_character>
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <Send_string+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Send_string+0x1a>
	_delay_us(1000);
}
void Send_string(char *p)
{
	int i=0;
	while(*(p+i)!='\0')
 13e:	89 91       	ld	r24, Y+
 140:	81 11       	cpse	r24, r1
 142:	f7 cf       	rjmp	.-18     	; 0x132 <Send_string+0xe>
	{
		Send_character(*(p+i));
		_delay_us(50);
		i++;
	}
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <Send_variable>:
void Send_variable(int k)
{
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	2a 97       	sbiw	r28, 0x0a	; 10
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
	char array[10];
	char t;
	int i=0,j;
	while(k!=0)
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	d9 f1       	breq	.+118    	; 0x1e0 <Send_variable+0x96>
 16a:	9e 01       	movw	r18, r28
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	89 01       	movw	r16, r18
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	f0 e0       	ldi	r31, 0x00	; 0
	{
		array[i]=((k%10)+48);
 176:	0f 2e       	mov	r0, r31
 178:	fa e0       	ldi	r31, 0x0A	; 10
 17a:	ef 2e       	mov	r14, r31
 17c:	f1 2c       	mov	r15, r1
 17e:	f0 2d       	mov	r31, r0
 180:	01 c0       	rjmp	.+2      	; 0x184 <Send_variable+0x3a>
		k=k/10;
		i++;
 182:	fa 01       	movw	r30, r20
	char array[10];
	char t;
	int i=0,j;
	while(k!=0)
	{
		array[i]=((k%10)+48);
 184:	b7 01       	movw	r22, r14
 186:	0e 94 ac 01 	call	0x358	; 0x358 <__divmodhi4>
 18a:	80 5d       	subi	r24, 0xD0	; 208
 18c:	d8 01       	movw	r26, r16
 18e:	8d 93       	st	X+, r24
 190:	8d 01       	movw	r16, r26
		k=k/10;
 192:	86 2f       	mov	r24, r22
 194:	97 2f       	mov	r25, r23
		i++;
 196:	af 01       	movw	r20, r30
 198:	4f 5f       	subi	r20, 0xFF	; 255
 19a:	5f 4f       	sbci	r21, 0xFF	; 255
void Send_variable(int k)
{
	char array[10];
	char t;
	int i=0,j;
	while(k!=0)
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	89 f7       	brne	.-30     	; 0x182 <Send_variable+0x38>
	{
		array[i]=((k%10)+48);
		k=k/10;
		i++;
	}
	array[i]='\0';
 1a0:	de 01       	movw	r26, r28
 1a2:	a4 0f       	add	r26, r20
 1a4:	b5 1f       	adc	r27, r21
 1a6:	11 96       	adiw	r26, 0x01	; 1
 1a8:	1c 92       	st	X, r1
	j=i-1;
	for (i=0;i<j;i++,j--)
 1aa:	1e 16       	cp	r1, r30
 1ac:	1f 06       	cpc	r1, r31
 1ae:	9c f4       	brge	.+38     	; 0x1d6 <Send_variable+0x8c>
 1b0:	bf 01       	movw	r22, r30
 1b2:	ec 0f       	add	r30, r28
 1b4:	fd 1f       	adc	r31, r29
 1b6:	32 96       	adiw	r30, 0x02	; 2
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		t=array[i];
 1bc:	d9 01       	movw	r26, r18
 1be:	4c 91       	ld	r20, X
		array[i]=array[j];
 1c0:	52 91       	ld	r21, -Z
 1c2:	5d 93       	st	X+, r21
 1c4:	9d 01       	movw	r18, r26
		array[j]=t;
 1c6:	40 83       	st	Z, r20
		k=k/10;
		i++;
	}
	array[i]='\0';
	j=i-1;
	for (i=0;i<j;i++,j--)
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	ab 01       	movw	r20, r22
 1cc:	48 1b       	sub	r20, r24
 1ce:	59 0b       	sbc	r21, r25
 1d0:	84 17       	cp	r24, r20
 1d2:	95 07       	cpc	r25, r21
 1d4:	9c f3       	brlt	.-26     	; 0x1bc <Send_variable+0x72>
	{
		t=array[i];
		array[i]=array[j];
		array[j]=t;
	}
	Send_string(array);
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	0e 94 92 00 	call	0x124	; 0x124 <Send_string>
}
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Send_variable+0x9a>
	{
		array[i]=((k%10)+48);
		k=k/10;
		i++;
	}
	array[i]='\0';
 1e0:	19 82       	std	Y+1, r1	; 0x01
 1e2:	f9 cf       	rjmp	.-14     	; 0x1d6 <Send_variable+0x8c>
		t=array[i];
		array[i]=array[j];
		array[j]=t;
	}
	Send_string(array);
}
 1e4:	2a 96       	adiw	r28, 0x0a	; 10
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <Set_cursor>:
void Set_cursor(int a,int b)
{
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
 208:	8b 01       	movw	r16, r22
	int c;
	Send_command(0b00000010);//return home
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	83 ed       	ldi	r24, 0xD3	; 211
 212:	90 e3       	ldi	r25, 0x30	; 48
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <Set_cursor+0x16>
 218:	00 c0       	rjmp	.+0      	; 0x21a <Set_cursor+0x1c>
 21a:	00 00       	nop
	_delay_ms(50);
	if(a==0)
 21c:	20 97       	sbiw	r28, 0x00	; 0
 21e:	69 f5       	brne	.+90     	; 0x27a <Set_cursor+0x7c>
	{
		for(c=1;c<=b;c++)
 220:	10 16       	cp	r1, r16
 222:	11 06       	cpc	r1, r17
 224:	64 f5       	brge	.+88     	; 0x27e <Set_cursor+0x80>
 226:	c1 e0       	ldi	r28, 0x01	; 1
 228:	d0 e0       	ldi	r29, 0x00	; 0
		{
			Send_command(0b00010100);
 22a:	84 e1       	ldi	r24, 0x14	; 20
 22c:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	91 e2       	ldi	r25, 0x21	; 33
 232:	9a 95       	dec	r25
 234:	f1 f7       	brne	.-4      	; 0x232 <Set_cursor+0x34>
 236:	00 00       	nop
	int c;
	Send_command(0b00000010);//return home
	_delay_ms(50);
	if(a==0)
	{
		for(c=1;c<=b;c++)
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	0c 17       	cp	r16, r28
 23c:	1d 07       	cpc	r17, r29
 23e:	ac f7       	brge	.-22     	; 0x22a <Set_cursor+0x2c>
 240:	1e c0       	rjmp	.+60     	; 0x27e <Set_cursor+0x80>
		{
			Send_command(0b00010100);
			_delay_us(100); //Right shift cursor to 1 place
		}
	}
	if(a==1)
 242:	c8 e2       	ldi	r28, 0x28	; 40
 244:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(c=1;c<=40;c++)
		{
			Send_command(0b00010100);
 246:	84 e1       	ldi	r24, 0x14	; 20
 248:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
 24c:	81 e2       	ldi	r24, 0x21	; 33
 24e:	8a 95       	dec	r24
 250:	f1 f7       	brne	.-4      	; 0x24e <Set_cursor+0x50>
 252:	00 00       	nop
 254:	21 97       	sbiw	r28, 0x01	; 1
			_delay_us(100); //Right shift cursor to 1 place
		}
	}
	if(a==1)
	{
		for(c=1;c<=40;c++)
 256:	b9 f7       	brne	.-18     	; 0x246 <Set_cursor+0x48>
		{
			Send_command(0b00010100);
			_delay_us(100);
		}
		for(c=1;c<=b;c++)
 258:	10 16       	cp	r1, r16
 25a:	11 06       	cpc	r1, r17
 25c:	84 f4       	brge	.+32     	; 0x27e <Set_cursor+0x80>
 25e:	c1 e0       	ldi	r28, 0x01	; 1
 260:	d0 e0       	ldi	r29, 0x00	; 0
		{
			Send_command(0b00010100);
 262:	84 e1       	ldi	r24, 0x14	; 20
 264:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
 268:	91 e2       	ldi	r25, 0x21	; 33
 26a:	9a 95       	dec	r25
 26c:	f1 f7       	brne	.-4      	; 0x26a <Set_cursor+0x6c>
 26e:	00 00       	nop
		for(c=1;c<=40;c++)
		{
			Send_command(0b00010100);
			_delay_us(100);
		}
		for(c=1;c<=b;c++)
 270:	21 96       	adiw	r28, 0x01	; 1
 272:	0c 17       	cp	r16, r28
 274:	1d 07       	cpc	r17, r29
 276:	ac f7       	brge	.-22     	; 0x262 <Set_cursor+0x64>
 278:	02 c0       	rjmp	.+4      	; 0x27e <Set_cursor+0x80>
		{
			Send_command(0b00010100);
			_delay_us(100); //Right shift cursor to 1 place
		}
	}
	if(a==1)
 27a:	21 97       	sbiw	r28, 0x01	; 1
 27c:	11 f3       	breq	.-60     	; 0x242 <Set_cursor+0x44>
			_delay_us(100); //Right shift cursor to 1 place
		}
		
	}
	
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <LCD_initialise>:
void LCD_initialise()
{
	DDR_CONTROL|=(1<<RS|1<<RW|1<<EN);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	87 60       	ori	r24, 0x07	; 7
 28c:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	87 ea       	ldi	r24, 0xA7	; 167
 290:	91 e6       	ldi	r25, 0x61	; 97
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_initialise+0xa>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_initialise+0x10>
 298:	00 00       	nop
	_delay_ms(100);
	DDR_DATA|=(1<<D7|1<<D6|1<<D5|1<<D4);
 29a:	8a b1       	in	r24, 0x0a	; 10
 29c:	80 6f       	ori	r24, 0xF0	; 240
 29e:	8a b9       	out	0x0a, r24	; 10
 2a0:	87 ea       	ldi	r24, 0xA7	; 167
 2a2:	91 e6       	ldi	r25, 0x61	; 97
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_initialise+0x1c>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_initialise+0x22>
 2aa:	00 00       	nop
	_delay_ms(100);
	Send_command(0x01);//clear screen
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
 2b2:	83 ed       	ldi	r24, 0xD3	; 211
 2b4:	90 e3       	ldi	r25, 0x30	; 48
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_initialise+0x2e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_initialise+0x34>
 2bc:	00 00       	nop
	_delay_ms(50);
	Send_command(0b00000010);//return home
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
 2c4:	83 ed       	ldi	r24, 0xD3	; 211
 2c6:	90 e3       	ldi	r25, 0x30	; 48
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_initialise+0x40>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_initialise+0x46>
 2ce:	00 00       	nop
	_delay_ms(50);
	Send_command(0x28);//function set
 2d0:	88 e2       	ldi	r24, 0x28	; 40
 2d2:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	91 e2       	ldi	r25, 0x21	; 33
 2d8:	9a 95       	dec	r25
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_initialise+0x50>
 2dc:	00 00       	nop
	_delay_us(100);
	Send_command(0b00001100);//display ON/OFF copntrol
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
 2e4:	81 e2       	ldi	r24, 0x21	; 33
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_initialise+0x5e>
 2ea:	00 00       	nop
 2ec:	08 95       	ret

000002ee <LCD_clear>:
	_delay_us(100);
}
void LCD_clear()
{
	Send_command(0b00000001);
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	83 ed       	ldi	r24, 0xD3	; 211
 2f6:	90 e3       	ldi	r25, 0x30	; 48
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_clear+0xa>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_clear+0x10>
 2fe:	00 00       	nop
	_delay_ms(50);
	Send_command(0b00000010);//return home
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_command>
 306:	83 ed       	ldi	r24, 0xD3	; 211
 308:	90 e3       	ldi	r25, 0x30	; 48
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_clear+0x1c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_clear+0x22>
 310:	00 00       	nop
 312:	08 95       	ret

00000314 <main>:
#include <util/delay.h>
#include "MyLCD_4bit.h"

int main(void)
{
    LCD_initialise();
 314:	0e 94 44 01 	call	0x288	; 0x288 <LCD_initialise>
	int k=0;
	Send_string("Hi Ruthra");
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 92 00 	call	0x124	; 0x124 <Send_string>
#include "MyLCD_4bit.h"

int main(void)
{
    LCD_initialise();
	int k=0;
 320:	c0 e0       	ldi	r28, 0x00	; 0
 322:	d0 e0       	ldi	r29, 0x00	; 0
	Send_string("Hi Ruthra");
    while (1) 
    {
		LCD_clear();
 324:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_clear>
		Send_string("WELCOME");
 328:	8a e0       	ldi	r24, 0x0A	; 10
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 92 00 	call	0x124	; 0x124 <Send_string>
	    Set_cursor(1,0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Set_cursor>
	    Send_variable(k);/* Replace with your application code */
 33c:	ce 01       	movw	r24, r28
 33e:	0e 94 a5 00 	call	0x14a	; 0x14a <Send_variable>
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	88 e0       	ldi	r24, 0x08	; 8
 346:	9d e3       	ldi	r25, 0x3D	; 61
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x34>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x3e>
 352:	00 00       	nop
		_delay_ms(20000);
		k++;
 354:	21 96       	adiw	r28, 0x01	; 1
 356:	e6 cf       	rjmp	.-52     	; 0x324 <main+0x10>

00000358 <__divmodhi4>:
 358:	97 fb       	bst	r25, 7
 35a:	07 2e       	mov	r0, r23
 35c:	16 f4       	brtc	.+4      	; 0x362 <__divmodhi4+0xa>
 35e:	00 94       	com	r0
 360:	07 d0       	rcall	.+14     	; 0x370 <__divmodhi4_neg1>
 362:	77 fd       	sbrc	r23, 7
 364:	09 d0       	rcall	.+18     	; 0x378 <__divmodhi4_neg2>
 366:	0e 94 c0 01 	call	0x380	; 0x380 <__udivmodhi4>
 36a:	07 fc       	sbrc	r0, 7
 36c:	05 d0       	rcall	.+10     	; 0x378 <__divmodhi4_neg2>
 36e:	3e f4       	brtc	.+14     	; 0x37e <__divmodhi4_exit>

00000370 <__divmodhi4_neg1>:
 370:	90 95       	com	r25
 372:	81 95       	neg	r24
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	08 95       	ret

00000378 <__divmodhi4_neg2>:
 378:	70 95       	com	r23
 37a:	61 95       	neg	r22
 37c:	7f 4f       	sbci	r23, 0xFF	; 255

0000037e <__divmodhi4_exit>:
 37e:	08 95       	ret

00000380 <__udivmodhi4>:
 380:	aa 1b       	sub	r26, r26
 382:	bb 1b       	sub	r27, r27
 384:	51 e1       	ldi	r21, 0x11	; 17
 386:	07 c0       	rjmp	.+14     	; 0x396 <__udivmodhi4_ep>

00000388 <__udivmodhi4_loop>:
 388:	aa 1f       	adc	r26, r26
 38a:	bb 1f       	adc	r27, r27
 38c:	a6 17       	cp	r26, r22
 38e:	b7 07       	cpc	r27, r23
 390:	10 f0       	brcs	.+4      	; 0x396 <__udivmodhi4_ep>
 392:	a6 1b       	sub	r26, r22
 394:	b7 0b       	sbc	r27, r23

00000396 <__udivmodhi4_ep>:
 396:	88 1f       	adc	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	5a 95       	dec	r21
 39c:	a9 f7       	brne	.-22     	; 0x388 <__udivmodhi4_loop>
 39e:	80 95       	com	r24
 3a0:	90 95       	com	r25
 3a2:	bc 01       	movw	r22, r24
 3a4:	cd 01       	movw	r24, r26
 3a6:	08 95       	ret

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
